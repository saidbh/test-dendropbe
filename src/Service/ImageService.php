<?php

namespace App\Service;

use App\Entity\Arbre;
use App\Entity\Essence;
use Intervention\Image\ImageManager as Image;
use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;
use Symfony\Component\HttpFoundation\File\Exception\FileException;
use Symfony\Component\HttpFoundation\File\UploadedFile;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\Serializer\Serializer;


class ImageService extends AbstractController
{
    public const TREE_DIR = '../public/api/images/arbres/';
    public const ESSENCE_DIR = '../public/api/images/epaysage/essences/';
    public const LOGO_TREE = '../public/api/images/logos/';

    public function addImage(UploadedFile $img, string $repertoire, $resize = true)
    {
        $fileName = $this->generateUniqueFileName() . '.' . $img->getClientOriginalExtension();
        try {
            $img->move(
                $repertoire,
                $fileName
            );
        } catch (FileException $e) {
            return ["data" => [
                "message" => "file not upload",
                "errorMessage" => $e->getMessage(),
                "errorCode" => 300
            ], 'statusCode' => Response::HTTP_BAD_REQUEST];
        }
        if ($resize) {
            self::resizeFile($repertoire, $fileName);
        }
        return $fileName;
    }

    /**
     * @return string
     */
    public function generateUniqueFileName(): string
    {
        // md5() reduces the similarity of the file names generated by
        // uniqid(), which is based on timestamps
        return md5(uniqid());
    }

    /*
     * @param $img
     */
    public static function resizeFile($repertoire, $fileName)
    {
        $fileToPath = $repertoire . '/' . $fileName;
        $image = new Image(['driver' => 'gd']);

        if (file_exists($fileToPath)) {
            $images = $image->make($fileToPath)->resize(600, 600);
            $images->save($fileToPath);
        }
    }

    function imagerotate($object, Request $request)
    {
        // GET PARAMS
        /** @var Serializer $serializer */
        $serializer = $this->get('serializer');
        $data = $serializer->decode($request->getContent(), 'json');

        if (!isset($data['degre']) || !isset($data['position'])) {
            return [
                "data" => [
                    'message' => 'Informatons obligatoire'
                ], 'statusCode' => Response::HTTP_BAD_REQUEST
            ];
        }

        if ($data['position'] == 1) {
            $fileName = $object->getImg1();
        } elseif ($data['position'] == 2) {
            $fileName = $object->getImg2();
        } elseif ($data['position'] == 3) {
            $fileName = $object->getImg3();
        }

        $repertoire = ($object instanceof Essence) ? self::ESSENCE_DIR : self::TREE_DIR;

        if (!self::rotatewithZebra($fileName, $repertoire, $data['degre'])) {
            return [
                'data' => [
                    "message" => 'Impossible de pivoter l\'image'
                ],
                'statusCode' => Response::HTTP_BAD_REQUEST
            ];
        }
        return [
            'data' => ["message" => 'Image pivoter avec success'],
            'statusCode' => Response::HTTP_OK
        ];
    }

    public static function rotatewithZebra(string $fileName, string $repertoire, int $degre): bool
    {
        // ROTATE IMAGE WITH ZEBRA
        $img = new \Zebra_Image();
        $img->source_path = $repertoire . $fileName;
        $img->target_path = $repertoire . $fileName;
        return $img->rotate($degre);
    }

    public function uploadImageInv(Request $request, $object)
    {
        $data['img1'] = $request->files->get('img1');
        $data['img2'] = $request->files->get('img2');
        $data['img3'] = $request->files->get('img3');

        $dataImg = [];
        $repertoire = ($object instanceof Arbre) ? self::TREE_DIR : self::ESSENCE_DIR;
        $type = ($object instanceof Essence) ? 'TREE' : 'ARBRE';

        if ($data['img1']) {
            $dataImg['img1'] = $this->addImage($data['img1'], $repertoire);
            self::deletephiscallyFile($object->getImg1(), $type);
            $object->setImg1($dataImg['img1']);
        }
        if ($data['img2']) {
            $dataImg['img2'] = $this->addImage($data['img2'], $repertoire);
            self::deletephiscallyFile($object->getImg2(), $type);
            $object->setImg2($dataImg['img2']);
        }
        if ($data['img3']) {
            $dataImg['img3'] = $this->addImage($data['img3'], $repertoire);
            self::deletephiscallyFile($object->getImg2(), $type);
            $object->setImg3($dataImg['img3']);
        }

        try {
            $em = $this->getDoctrine()->getManager();
            $em->persist($object);
            $em->flush();
            return [
                "data" => [
                    "message" => "Image upload avec succÃ¨s",
                ],
                "statusCode" => Response::HTTP_OK
            ];
        } catch (\Doctrine\DBAL\DBALException $e) {
            return [
                "data" => [
                    "message" => "Impossible d'uploader le fichier",
                ],
                "statusCode" => Response::HTTP_BAD_REQUEST
            ];
        }
    }

    public static function deletephiscallyFile(?string $fileName, $type = 'TREE'): bool
    {
        if ($fileName) {
            $url = ($type == 'TREE' ? self::TREE_DIR : self::ESSENCE_DIR) . $fileName;
            if (is_writable(realpath($url))) {
                unlink(realpath($url));
            }
        }
        return true;
    }
}
